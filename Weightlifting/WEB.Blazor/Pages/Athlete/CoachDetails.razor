@using DTO.Athletes;
@inject IAthleteService _athleteService;
@inject ICoachService _coachService;

<h3>Coach</h3>

@if(HasCoach)
{
    // show coach details
    <p>Hey @Athlete.FirstName! Here are your Coach's details.</p>

    <div class="form-group">
        <p>First name: @Coach.FirstName</p>
        <p>Last name: @Coach.LastName</p>
    </div>
} else
{
    <p>Hey @Athlete.FirstName, it's easier to train with a coach, select one from this list!</p>

        <select class="form-control" @bind="CoachId">

            @foreach(var coach in AvailableCoaches)
            {
                <option value="@coach.CoachId">@coach.FirstName</option>
            }

        </select>

        <button class="btn btn-primary" type="submit" @onclick="AddCoachSubmit">Add coach</button>
}

@code {

    protected bool HasCoach = false;

    protected CoachDetailsDTO Coach = new();
    protected AthleteDetailsDTO Athlete = new();
    protected IEnumerable<CoachDetailsDTO> AvailableCoaches = new List<CoachDetailsDTO>();
    
    protected override async Task OnInitializedAsync()
    {
        await _athleteService.MyDetails();

        if (Athlete.Coach is not null)
        {
            HasCoach = true;
            Coach = Athlete.Coach;
        } else
        {
            var result = await _athleteService.GetCoaches();

            AvailableCoaches = result.Coaches;
        }
    }

    protected int CoachId;
    protected async Task AddCoachSubmit()
    {
        var result = await _athleteService.AddCoach(CoachId);

        Athlete.Coach = result.CoachDetails;

        HasCoach = true;
    }
}
